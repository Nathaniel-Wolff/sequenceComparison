{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "executionInfo": {
     "elapsed": 725,
     "status": "ok",
     "timestamp": 1546555041372,
     "user": {
      "displayName": "Benedict Paten",
      "photoUrl": "https://lh6.googleusercontent.com/-KEXp34y2Ra8/AAAAAAAAAAI/AAAAAAAAAHs/xzPsOsCpcaU/s64/photo.jpg",
      "userId": "06399644931392855882"
     },
     "user_tz": 480
    },
    "id": "173pjFDiwTdM",
    "outputId": "0d9d7aea-90e8-4c3c-f7bd-3085b7c72b1b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Problem 1 - Build the BWT\n",
    "\n",
    "def makeBwt(t):\n",
    "    \"\"\"Create the BWT for the string t$\"\"\"\n",
    "    tDollar = t + \"$\"\n",
    "    \n",
    "    #generate all of the cyclic rotations of the string and sort them lexographically \n",
    "    #then take the last character of each, and join that list\n",
    "    thisBWT = str(\"\".join([string[-1] for string in sorted([tDollar[start:] + tDollar[0:start] for start in range(0, len(tDollar))])]))\n",
    "    \n",
    "    return thisBWT\n",
    "\n",
    "text = \"GATTACA\"\n",
    "\n",
    "bwt = makeBwt(text)\n",
    "\n",
    "bwt == \"ACTGA$TA\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "executionInfo": {
     "elapsed": 777,
     "status": "ok",
     "timestamp": 1546555431517,
     "user": {
      "displayName": "Benedict Paten",
      "photoUrl": "https://lh6.googleusercontent.com/-KEXp34y2Ra8/AAAAAAAAAAI/AAAAAAAAAHs/xzPsOsCpcaU/s64/photo.jpg",
      "userId": "06399644931392855882"
     },
     "user_tz": 480
    },
    "id": "LkOQQdDIzpz2",
    "outputId": "f6c67c53-1248-4ee9-ed98-2b6cf27c21f2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Problem 2 - Invert the BWT\n",
    "\n",
    "def invertBwt(bwt):\n",
    "    \"\"\"Inverts the Burrows-Wheeler Transform, returning the original string using \n",
    "    inefficent algorithm\"\"\"\n",
    "  \n",
    "  #Iteration (number of times = length of the BWT) of the following... \n",
    "        #given array of the k-mers up the known column \n",
    "        #append the BWT to each\n",
    "        #sort that array\n",
    "    \n",
    "    #initializing cyclic rotation array with a list version of the bwt\n",
    "    listBWT = list(bwt)\n",
    "    kmerArray = list(bwt)\n",
    "    \n",
    "    for iteration in range(len(bwt)-1):\n",
    "        #sorting the current sorted array\n",
    "        currentColumn = sorted(kmerArray)\n",
    "        \n",
    "        #pairwise appending BWT to each element of the current column \n",
    "        newColumn = [listBWT[i]+currentColumn[i] for i in range(len(bwt))]\n",
    "        #saving the new column as the next kmerArray\n",
    "        kmerArray = newColumn\n",
    "    \n",
    "    #is this the right way to do this????\n",
    "    inverseBWT = sorted(kmerArray)[0]\n",
    "    hit = inverseBWT[1:] + inverseBWT[0]\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    return hit\n",
    "text = \"GATTACA\"\n",
    "bwt = \"ACTGA$TA\"\n",
    "\n",
    "invertBwt(bwt) == text + \"$\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "executionInfo": {
     "elapsed": 380,
     "status": "ok",
     "timestamp": 1546564864670,
     "user": {
      "displayName": "Benedict Paten",
      "photoUrl": "https://lh6.googleusercontent.com/-KEXp34y2Ra8/AAAAAAAAAAI/AAAAAAAAAHs/xzPsOsCpcaU/s64/photo.jpg",
      "userId": "06399644931392855882"
     },
     "user_tz": 480
    },
    "id": "KsnqBYpl7md2",
    "outputId": "3d03770f-f311-4089-e11a-bf42ebd34a68"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<__main__.FmIndex object at 0x10ec4a710>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Problem 3 - Complete Last-to-First mapping using FM-index\n",
    "\n",
    "\n",
    "#complete\n",
    "class FmIndex(object):\n",
    "    def __init__(self, t, alphabet):\n",
    "        ''' Create FM-index for t in naive manner '''\n",
    "      \n",
    "        # Make the BWT \n",
    "        # We don't compress or anything here, but you could\n",
    "        self.bwt = makeBwt(t)\n",
    "        self.L = self.bwt\n",
    "      \n",
    "        # Calculate C lookup dictionary in crappy way\n",
    "        #Nathaniel's notes: \n",
    "        #sorts the BWT to return column L.\n",
    "        #Since the BWT is sorted, iterating backwards, each character's index is its C[i] lookup value \n",
    "        s = sorted(self.bwt)\n",
    "        \n",
    "        self.C = {}\n",
    "        for i in range(len(s)-1, -1, -1):\n",
    "            self.C[s[i]] = i\n",
    "        #print(self.C)\n",
    "      \n",
    "      # Calculate full Occ table in similarly crappy way\n",
    "      # Recall, this is not using sampling and is therefore very memory inefficient \n",
    "    #Nathaniel's notes:\n",
    "    #Builds a list of dictionaries\n",
    "    #Iterates, for a given index in the BWT, over all the characters and counts occurences\n",
    "        self.Occ = [ {} for i in range(len(self.bwt)) ]\n",
    "        for i in range(len(self.bwt)):\n",
    "            for j in alphabet + \"$\":\n",
    "                #below line initializes the dictionary with occurence values of 0 for 0th index\n",
    "                p = self.Occ[i-1][j] if i > 0 else 0\n",
    "                #uses the occurence value of the character at the last index to calculate the current one \n",
    "                self.Occ[i][j] = p + (1 if self.bwt[i] == j else 0)\n",
    "        #print(self.Occ)\n",
    "      \n",
    "    def lf(self, i):\n",
    "        \"\"\" Return the last-to-first mapping for index i of the bwt \"\"\"\n",
    "    #Code to complete\n",
    "    #Hint, don't forget to convert between 0 based Python string coordinates and 1 based coordinates of FM-index tables\n",
    "    \n",
    "    #uses the formula LF[i] = C[L[i]] + Occ[L[i], i]\n",
    "    \n",
    "        LF_i = int(self.C[self.L[i]] + self.Occ[i][self.L[i]] - 1)\n",
    "        \n",
    "        \n",
    "        \n",
    "        return LF_i\n",
    "    \n",
    "dnaAlphabet = \"ACGT\"\n",
    "fmIndex = FmIndex(text, dnaAlphabet)\n",
    "\n",
    "print(fmIndex)\n",
    "\n",
    "\n",
    "fmIndex.lf(5) == 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "executionInfo": {
     "elapsed": 382,
     "status": "ok",
     "timestamp": 1546564908738,
     "user": {
      "displayName": "Benedict Paten",
      "photoUrl": "https://lh6.googleusercontent.com/-KEXp34y2Ra8/AAAAAAAAAAI/AAAAAAAAAHs/xzPsOsCpcaU/s64/photo.jpg",
      "userId": "06399644931392855882"
     },
     "user_tz": 480
    },
    "id": "XO8RDtA5W9aI",
    "outputId": "bc741b6a-4d7d-4f09-ddc4-41690f5e0984"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Problem 4 - Use backward search to invert the BWT\n",
    "\n",
    "def invertBwtUsingFmIndex(fmIndex):\n",
    "    \"\"\" Returns t by using repeated lf search to reconstruct t$ backwards\"\"\"\n",
    "  \n",
    "  # Code to write\n",
    "  ## Hint: start from location of \"$\"  in bwt, then walk backwards using fmIndex.lf\n",
    "  ## function to build t\n",
    "    \n",
    "    #starting w/location of $\n",
    "    originalString = \"$\"\n",
    "    lastIndex = fmIndex.bwt.index(\"$\")\n",
    "    \n",
    "    #iterating through all but the last character of the bwt\n",
    "    for preceedingCharacterIndex in range(len(fmIndex.bwt)-1):\n",
    "        #using last to first mapping using the lf backwards walk\n",
    "        #finds the index, in the BWT, of the preceeding character\n",
    "        indexPreceedingCharacter = fmIndex.lf(lastIndex)\n",
    "        #saving that index as the last index, to start the walk from again\n",
    "        lastIndex = indexPreceedingCharacter\n",
    "        \n",
    "        #going to that character in the bwt, and adding it the the front of the substring\n",
    "        originalString = fmIndex.bwt[indexPreceedingCharacter] + originalString\n",
    "    \n",
    "    return originalString\n",
    "        \n",
    "        \n",
    "\n",
    "invertBwtUsingFmIndex(fmIndex) == \"GATTACA$\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "khGNJCfkhInl"
   },
   "source": [
    "Problem 4 questions:\n",
    "\n",
    "Q: What is the asymptotic runtime of your invertBwtUsingFmIndex function?\n",
    "m = length of BWT\n",
    "\n",
    "O(m) time. \n",
    "\n",
    "Q2: How does this to compare to the runtime of the invertBWT function?\n",
    "\n",
    "Invert BWT function uses two nested for loops which means O(m^2) time, a whole factor of m higher. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Y5XishWt29jy"
   },
   "outputs": [],
   "source": [
    "# Extra credit: adapt the FmIndex class and add a pattern query method to search for instance of input pattern in t"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "BME 230 Efficient string comparison part 3.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
